#!/usr/bin/perl -wT
# Copyright (C) 2009 Espen Braastad
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; version 2 dated June,
# 1991.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

#
# This is a script to collect munin graphs into one html page
# from multiple munin installations.
#
# Based on Ingvar Hagelunds munin collect script
#
#
# $log$
#  2010-08-12 espen
#    Finally added proper support for munin 1.4.
#  2010-09-14 ingvar
#    Added support for sublevel munin data, ie. munin.linpro.no
#    (Only munin-1.4 for now)
#  2012-12-07 jo
#    Added rudimentary support for 2.0
#
#
# Schedule to run in crontab, i.e. once pr. hour:
#  0 */1 * * * user /path/to/munincollector-ng/munincollector-ng -c /path/to/munincollector-ng.conf
#

use strict;
use warnings;
use LWP::UserAgent;
use File::Path;
use File::Copy;
use Getopt::Std;

my $version="0.8";

my $debug=0;
my $opt_string = 'hc:';
my %opt;
getopts( "$opt_string", \%opt ) or usage();

usage() if $opt{h};

my $config="";

if(-r "/etc/munin/munincollector-ng.conf"){;
  $config="/etc/munin/munincollector-ng.conf";
}

if(defined($opt{c})){
  if(-r "$opt{c}"){
    $config=$opt{c};
  }
}

if(! -r $config){
  print "Unable to read configuration file.\n";
  usage();
  exit;
}
my %config=&read_config($config);

if(!defined($config{'plugin'})){
  print "graph.plugin not set in the configuration file.\n";
  exit;
}
my $plugin=$config{'plugin'};

if(!defined($config{'type'})){
  print "graph.type not set in the configuration file.\n";
  exit;
}
my @graph_types=split(" ",$config{'type'});

if(!defined($config{'dir'})){
  print "graph.dir not set in the configuration file.\n";
  exit;
}
my $dir=$config{'dir'};

if(! -w ${dir}){
  print "graph.dir ($dir) is not writable.\n";
  exit;
}

my $log=undef;
if(defined($config{'log'})){
  $log=$config{'log'};
  if(-e $log){
    if(! -w $log){
      print $log . " is not writable (graph.log)\n";
      exit;
    }
  } else {
    open (FILE, '>' . $log) or die "Unable to create $log";
    close (FILE); 
  }
}

my %urls=&read_urls($config);

# Making sure the logo and stylesheet is present in $dir
if(-r "/etc/munincollector-ng/logo.png"){
  if(! -r $dir . "/logo.png"){
    copy("/etc/munincollector-ng/logo.png",$dir);
  }
}
if(-r "/etc/munincollector-ng/style.css"){
  if(! -r $dir . "/style.css"){
    copy("/etc/munincollector-ng/style.css",$dir);
  }
}

my %res=();

foreach my $domain ( keys %urls) {

  $debug && print "Domain: " . $domain . "\n";
  if(defined($urls{$domain}{'url'})){
    my $url=$urls{$domain}{'url'};
    my $username="";
    my $password="";
    my $realm="";
    my $netloc="";

    if(defined($urls{$domain}{'username'}) &&
      defined($urls{$domain}{'password'}) &&
      defined($urls{$domain}{'netloc'}) &&
      defined($urls{$domain}{'realm'})) {
        $username=$urls{$domain}{'username'};
        $password=$urls{$domain}{'password'};
        $realm=$urls{$domain}{'realm'};
        $netloc=$urls{$domain}{'netloc'};
        #$debug && print " (Login)\n";
    } else {
      #$debug && print " (No login)\n";
    }

    $res{$domain}{'url'}=$url;
    $res{$domain}{'data'}=&parse_urls($url,$username,$password,$realm,$netloc,$domain);

  } else {
    dolog("Invalid entry in " . $config) if $log;
  }
}

my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst)=localtime(time);
my $generated=sprintf("%4d-%02d-%02d T %02d:%02d:%02d\n", $year+1900,$mon+1,$mday,$hour,$min,$sec);

# Function to read and parse the websites containing the munin "front page"
# Return a hash with URLs to the graphs
sub parse_urls{
  my $url = $_['0'];
  my $username = $_['1'];
  my $password = $_['2'];
  my $realm = $_['3'];
  my $netloc = $_['4'];
  my $domain = $_['5'];

  my $ua = LWP::UserAgent->new;
  $ua->credentials($netloc,$realm,$username,$password);

  my $response = $ua->get($url);

  my %data=();

  if ($response->is_success) {
    dolog("> Fetched successfully: $url") if $log;

    my @lines=split(/\n/,$response->content);

    my $munin_version="Not found";
    foreach my $line (@lines){
      if($line =~ m/\s*<td><i class="small">This page was generated by.*version 1\.4.*/){
        $munin_version="1.4";
      } elsif($line =~ m/\s*<td><i class="small">This page was generated by.*version 1\.2.*/){
        $munin_version="1.2";
      } elsif($line =~ m/\s*<p class="tagline">This page was generated by.*version 2\./){
        $munin_version="2";
      }
    }
    $debug && print " Munin version: " . $munin_version . "\n";

    foreach my $line (@lines){

      # Get the hosts and groups monitored by this munin.
      # Look for the following lines:
      #  <li><span class="host"><a href="xen/foo.bar.no.html">foo.bar.no</a></span> :: 

      if($munin_version == "1.2"){
        if($line =~ m/\s*<li><span class=\"host\"><a href=\"([^\/]+)\/([^\"\/]+).*/){

          my $group=$1;
          my $host=$2;
          $host =~ s/\.html$//;
  
          $debug && print "  Group:         " . $group . "\n";
          $debug && print "  Hostname:      " . $host . "\n";
          $debug && print "  Plugin:        " . $plugin . "\n";
          $debug && print "  Graph types:  ";
  
          foreach my $graph_type (@graph_types) {
            $debug && print " " . $graph_type;
          }
          $debug && print "\n";
  
          foreach my $graph_type (@graph_types) {
            my $graph_dir=$url . "/" . $group . "/";
   
            my $graph_file=$host . "-" . $plugin . "-" . $graph_type . ".png";

            my $graph=$graph_dir . $graph_file;
  
            $debug && print "  Graph url:     " . $graph . "\n";
  
            my $dest_dir=$dir . "/" . $domain . "/" . $group . "/";
  
            my $dest_file=$dest_dir . $graph_file;
            mkpath($dest_dir,0,0755);
            my $status=&fetch_image($graph,$username,$password,$realm,$netloc,$dest_file);
  
            if($status == 0){
              $data{$group}{$host}{$graph_type}{'url'}=$graph;
              $data{$group}{$host}{$graph_type}{'file'}=$graph_file;
              $data{$group}{$host}{$graph_type}{'version'}=$munin_version;
    
              $debug && print "  Graph file:    " . $dest_file . "\n";
            } else {
              #&html('      <p>Failed to fetch <a href="' . $graph . '">' . $graph . '</a></p>');
  
              $debug && print "  Failed to fetch graph.\n";
            }
            $debug && print "\n";
          }
  	}
      } elsif ($munin_version == "1.4"){
        my $group;
        my $host;
        my $found=0;
        my $sublevel=0;

        if($line =~ m/\s*<li><span class=\"host\"><a href=\"(.*)\/([^\/]+)\/index.html.*$/){
          $group=$1;
          $host=$2;
          $found=1;
        }

        # Support for sublevel munin data
        elsif ($line =~ m/\s*<li><span class=\"host\"><a href=\"([^\/]+)\/index.html.*$/){
           $group=$domain;
           $host=$1;
           $sublevel=1;
           $found=1;
        }

        if ( $found ) {
  
          $debug && print "  Group:         " . $group . "\n";
          $debug && print "  Hostname:      " . $host . "\n";
          $debug && print "  Plugin:        " . $plugin . "\n";
          $debug && print "  Graph types:  ";

          foreach my $graph_type (@graph_types) {
            $debug && print " " . $graph_type;
          }
          $debug && print "\n";
  
          foreach my $graph_type (@graph_types) {
            my $graph_dir;
            
            if ( $sublevel ) {
                $graph_dir=$url . "/" . $host . "/";
            }
            else {
                $graph_dir=$url . "/" . $group . "/" . $host . "/";
            }
   
            my $graph_file=$plugin . "-" . $graph_type . ".png";

            my $graph=$graph_dir . $graph_file;
  
            $debug && print "  Graph url:     " . $graph . "\n";
  
            my $dest_dir=$dir . "/" . $domain . "/" . $group . "/" . $host . "/";
  
            my $dest_file=$dest_dir . $graph_file;
            mkpath($dest_dir,0,0755);
            my $status=&fetch_image($graph,$username,$password,$realm,$netloc,$dest_file);
  
            if($status == 0){
              $data{$group}{$host}{$graph_type}{'url'}=$graph;
              $data{$group}{$host}{$graph_type}{'file'}=$graph_file;
              $data{$group}{$host}{$graph_type}{'version'}=$munin_version;
    
              $debug && print "  Graph file:    " . $dest_file . "\n";
            } else {
              #&html('      <p>Failed to fetch <a href="' . $graph . '">' . $graph . '</a></p>');
  
              $debug && print "  Failed to fetch graph.\n";
            }
            $debug && print "\n";
          }
        }
      } elsif ($munin_version == "2") {
        my $hostdir;
        my $found = 0;
        my $group;
        my $host;

        # <span class="host"><a href="Ticket/max.bar.no/index.html">max.bar.no</a></span>
        if($line =~ m/\s*<span class=\"host\"><a href=\"(([^"]*)\/([^"\/]+))\/index\.html">/){
          $hostdir=$1;
          $host=$3;
          if (defined $2) {
              $group=$2;
          } else {
              $group=$domain;
          }
          $found=1;
        } elsif($line =~ m/\s*<span class="service"><a [^>]+href="(([^"]+)\/([^"\/]+)\.html)">/ and $3 eq $plugin) {
          $hostdir=$2;
          $host=$2;
          $group=$domain;
          $found=1;
        }

        if ( $found ) {
  
          $debug && print "  Hostdir:       " . $hostdir . "\n";
          $debug && print "  Host:          " . $host . "\n";
          $debug && print "  Group:         " . $group . "\n";
          $debug && print "  Graph types:   " . join(" ",@graph_types) . "\n";

          foreach my $graph_type (@graph_types) {
            my $graph_dir =$url; $graph_dir =~ s/\/(:?index.html)?$/\/$hostdir\//;
            my $graph_file=$plugin . "-" . $graph_type . ".png";
            my $graph     ="$graph_dir$graph_file";
  
            $debug && print "  Graph url:     " . $graph . "\n";
  
            my $dest_dir =$dir . "/" . $domain . "/" . $hostdir . "/";
            my $dest_file=$dest_dir . $graph_file;
            mkpath($dest_dir,0,0755);

            my $graph_location=&fetch_v2_image_location($graph_dir,$plugin,$graph_type,$username,$password,$realm,$netloc);
            if (!defined $graph_location) {
                # Munin 2, but no cgi graphing - revert to the calculated url which should work
                $graph_location = $graph;
            }
            $debug && print "  Graph url:     $graph_location\n";
            my $status=&fetch_image($graph_location,$username,$password,$realm,$netloc,$dest_file);
  
            if($status == 0){
              $data{$group}{$host}{$graph_type}{'url'}=$graph_location;
              $data{$group}{$host}{$graph_type}{'file'}=$graph_file;
              $data{$group}{$host}{$graph_type}{'version'}=$munin_version;
    
              $debug && print "  Graph file:    " . $dest_file . "\n";
            } else {
              #&html('      <p>Failed to fetch <a href="' . $graph . '">' . $graph . '</a></p>');
  
              $debug && print "  Failed to fetch graph \"$graph_location\".\n";
            }
            $debug && print "\n";
          }
        }

      }
    }
  } else {
    #TODO
    dolog("Failed to parse: " . $url . " -> " . $response->status_line) if $log;
  }
  return \%data;
}

#use Data::Dumper;
#print Dumper(%res);
##exit;

# Empty the html file
open (FILE, '>' . $dir . '/index.html');
close (FILE); 

&html('<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"> <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"> <head> <link rel="stylesheet" href="style.css" type="text/css" /> <title>Munin :: collector-ng</title> <meta http-equiv="content-type" content="application/xhtml+xml; charset=iso-8859-1" /> <meta name="author" content="Auto-generated by Munin collector-ng" /> </head> <body> <table cellpadding="3" border="0"> <tr> <td><div class="logo">&nbsp;</div></td> <td valign="top"><h1>Munin collector-ng</h1></td> </tr> </table> <div class="box">');

&html('<p>Collecting the ');
foreach my $graph_type (@graph_types) {
  &html(' ' . $graph_type . ' ');
}

&html(' graphs from the ' . $plugin . ' plugin.</p>');
&html('<h2>Overview</h2>');

# Creating a short index
&html('<ul>');
for my $domain ( sort keys %res ){
  # Looping through the munin instances (domains)

  &html('  <li><a href="#' . $domain . '"><span class="domain">' . $domain . '</span></a> :: [');

  my $count=0;
  for my $subkey ( sort keys %{$res{$domain}{'data'}} ){
    # Looping through the groups
    my $group=$subkey;

    &html(' <a href="#' . $domain . '-' . $group . '"><span class="host">' . $group . '</span></a> ');
    $count+=keys(%{$res{$domain}{'data'}{$group}});
  }
  &html(' ]');
  &html(' ' . $count);
  if($count != 1){
    &html(' hosts');
  } else {
    &html(' host');
  }
}
&html('</ul>');

&html('<br/>');
&html('<h2>Graphs</h2>');

# Generating the list of graphs
&html('<ul>');
for my $key ( sort keys %res ){
  # Looping through the munin instances (domains)
  my $domain=$key;

  my $url=$res{$domain}{'url'};
  &html('  <li><a name="' . $domain . '" href="' . $url . '"><span class="domain">' . $domain . '</span></a></li>');
  &html('  <ul>');

  for my $subkey ( sort keys %{$res{$key}{'data'}} ){
    # Looping through the groups
    my $group=$subkey;

    &html('    <li><a name="' . $domain . '-' . $group . '" href="' . $url . '/' . $group . '"><span class="domain">' . $group . '</span></a></li>');
    &html('    <ul>');

    for my $subsubkey ( sort keys %{$res{$key}{'data'}{$subkey}} ){
      # Looping through the hosts
      my $host=$subsubkey;

      &html('      <li><span class="host"><a name="' . $domain . '" href="' . $url . '"><span class="host">' . $domain . '</span></a> :: <a href="' . $url . '/' . $group . '">' . $group . '</a> :: <a href="' . $url . '/' . $group . '/' . $host . '.html">' . $host . '</span></a></li>');

      foreach my $graph_type (@graph_types) {
        my $graph_file=$res{$key}{'data'}{$subkey}{$subsubkey}{$graph_type}{'file'};

        if($res{$key}{'data'}{$subkey}{$subsubkey}{$graph_type}{'version'} == "1.4"){
          &html('      <a href="' . $url . '/' . $group . '/' . $host . '/' . $plugin . '.html">');
          &html('      <img src="' . $domain . '/' . $group . '/' . '/' . $host . '/' . $graph_file . '"/>');
        } elsif($res{$key}{'data'}{$subkey}{$subsubkey}{$graph_type}{'version'} == "2"){
          my $localurl = $url;
          $localurl =~ s|/index.html$||;
          if ($domain eq $group) {
            &html('      <a href="' . $localurl . '/' . $host . '/' . $plugin . '.html">');
            &html('      <img src="' . $domain . '/' . $host . '/' . $graph_file . '"/>');
          } else {
            &html('      <a href="' . $localurl . '/' . $group. '/' . $host . '/' . $plugin . '.html">');
            &html('      <img src="' . $domain . '/' . $group . '/' . $host . '/' . $graph_file . '"/>');
          }
        } else {
          &html('      <a href="' . $url . '/' . $group . '/' . $host . '-' . $plugin . '.html">');
          &html('      <img src="' . $domain . '/' . $group . '/' . $graph_file . '"/>');
        }
        &html('      </a>');
      }
    }
    &html('    </ul>');
  }
  &html('  </ul>');
}

&html('</ul>');
&html('</div><table cellpadding="2" cellspacing="4" border="0"><tr><td><i class="small">This page was generated by munin collector-ng version ' . $version . ' at ' . $generated . '</i></td></tr> </table> </body> </html>');

# Function to read the urls from the configuration file
sub read_urls{
  my $file=$_[0];
  my %urls=();
  if(-r $file){
    open(FILE,'<'.$file);
    while (<FILE>) { 
      my $line=$_;
      chomp($line);
      
      # Skipping comments
      if($line =~ m/^[^#]/ && $line !~ m/^\s*$/ && $line !~ m/^graph\./){
        #$debug && print "[" . $line . "]\n";

        if($line =~ m/^([^\.]+)\.([^\s]+)\s+(.*)/){
          $urls{$1}{$2}=$3;
        }
      }
    }
    close (FILE);
  }
  return %urls;
}

# Function to read the settings from the configuration file
sub read_config{
  my $file=$_[0];
  my %config=();
  if(-r $file){
    open(FILE,'<'.$file);
    while (<FILE>) { 
      my $line=$_;
      chomp($line);
      
      # Skipping comments
      if($line =~ m/^[^#]/ && $line !~ m/^\s*$/){
        #$debug && print "[" . $line . "]\n";

        if($line =~ m/^graph\.([^\s]+)\s+(.*)/){
          if(length($2)>0){
            $config{$1}=$2;
	  }
        }
      }
    }
    close (FILE);
  }
  return %config;
}

sub fetch_v2_image_location {
  my $graph_dir = $_['0'];
  my $plugin = $_['1'];
  my $graph_type = $_['2'];
  my $username = $_['3'];
  my $password = $_['4'];
  my $realm = $_['5'];
  my $netloc = $_['6'];
  my $status=1;
  my $base_host = $graph_dir;
  $base_host =~ s|^(http://[^/]+/).*$|$1|;

  my $ua = LWP::UserAgent->new;
  $ua->credentials($netloc,$realm,$username,$password);

  $debug && print "  v2 GET url:    $graph_dir$plugin.html\n";
  my $request = new HTTP::Request('GET',$graph_dir . $plugin . ".html"); 
  my $response = $ua->request($request);

  if($response->is_success){
    my @lines=split(/\n/,$response->content);
    foreach my $line (@lines) {
        if ($line =~ /<img src="(\/[^"]+$plugin-$graph_type.png)"/) {
            return $base_host . $1;
        }
    }
  } else {
    dolog("--> Failed to download: " . $graph_dir . $plugin . ".html" . " -> " . $response->status_line) if $log;
  }
  return undef;
}
sub fetch_image{
  my $url = $_['0'];
  my $username = $_['1'];
  my $password = $_['2'];
  my $realm = $_['3'];
  my $netloc = $_['4'];
  my $dest = $_['5'];
  my $status=1;

  my $ua = LWP::UserAgent->new;
  $ua->credentials($netloc,$realm,$username,$password);

  my $request = new HTTP::Request('GET',$url); 
  my $response = $ua->request($request,$dest);

  if($response->is_success){
    #dolog("--> Downloaded successfully: " . $url . " -> " . $dest) if $log;
    $status=0;
  } else {
    dolog("--> Failed to download: " . $url . " -> " . $response->status_line) if $log;
  }
  return $status;
}

sub html{
  my $text=$_['0'];
  open (FILE, '>>' . $dir . '/index.html');
  print FILE $text . "\n";
  close (FILE); 
}

sub dolog{
  my $text=$_['0'];
  if($log){
    my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst)=localtime(time);
    my $generated=sprintf("%4d-%02d-%02d T %02d:%02d:%02d\n", $year+1900,$mon+1,$mday,$hour,$min,$sec);
    chomp($generated);

    open (FILE, '>>' . $log);
    print FILE $generated . " " .$text . "\n";
    close (FILE); 
  }
}

sub usage {
  print STDERR << "EOF";

 Munin collector-ng

  Options:
    -h               - This help screen
    -c <config file> - Specify an alternative configuration file to use.
                       If this option is not used, munincollector-ng will
		       look for /etc/munin/munincollector-ng.conf

EOF
  exit;
}
